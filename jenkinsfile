def registry = 'https://imransd.jfrog.io/'
pipeline{
    agent {
        node {
            label "build"
        }
    }
        environment {
            PATH = "/opt/apache-maven-3.9.0/bin:$PATH"
        }
        stages {
            stage ("scm checkout") {
                steps{
                    git branch: 'main', credentialsId: '07c0414c-745c-4dfc-aae5-089fb824fc4d', url: 'https://github.com/sdimran7387/twitter.git'
                }
            }
            stage (build) {
                steps{
                    sh 'mvn clean deploy'

        
                }
            }
            stage ('sonar analysis') {
                environment {
                    scannerHome = tool 'sonar scanner'
                }
                steps {
                    withSonarQubeEnv('sonarqube server') {
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
                stage ('quality check') {
                    steps{
                        script{
                            timeout (time: 1, unit: 'HOURS') {
                                def qg = waitForQualityGate()
                                if(qg.status !='OK') {
                                error "Pipeline failed due to quality failure: ${qg.status}"
                            }
                        }
                    }
                }
            }
                  stage("Jar Publish") {
        steps {
            script {
                    echo '<--------------- Jar Publish Started --------------->'
                     def server = Artifactory.newServer url:registry+"/artifactory" ,  credentialsId:"jfrogforjenkins"
                     def properties = "buildid=${env.BUILD_ID},commitid=${GIT_COMMIT}";
                     def uploadSpec = """{
                          "files": [
                            {
                              "pattern": "jarstaging/(*)",
                              "target": "twitter-libs-release-local/{1}",
                              "flat": "false",
                              "props" : "${properties}",
                              "exclusions": [ "*.sha1", "*.md5"]
                            }
                         ]
                     }"""
                     def buildInfo = server.upload(uploadSpec)
                     buildInfo.env.collect()
                     server.publishBuildInfo(buildInfo)
                     echo '<--------------- Jar Publish Ended --------------->'  
            
                    }
                }   
            }

        }
    }
